<Component의 종류>
1. Function Component
Class Component가 사용하기 불편하다는 의견이 많아 Function Component를 개선하여 사용함.
함수 컴포넌트를 개선하는 과정에서 만들어진 hook 개념은 후에 배울 것임. 현재 react 개발에서는 거의 hook을 사용함.
장점은 코드가 간결하다는 데 있다.

Function Component [ex]
아래 Welcome 함수는 하나의 props 객체를 받아 인사말이 담긴 React Element를 return하므로 React Component라고 할 수 있다.
function Welcome(props) {
  return <h1>안녕, {props.name}</h1>;
}


2. Class Component
- ES6의 class라는 것을 이용해 만든 형태의 컴포넌트이다.
- 함수 컴포넌트와 비교하여 몇 가지 추가적인 기능들을 가지고 있다.
  --> 가장 큰 차이점은 리액트의 모든 클래스 컴포넌트는 React.Component로부터 상속받아 만들어진다는 의미이다. (새로운 자식 클래스로 만들어진다.)

Class Component [ex]
위의 Function Component 예제 코드와 동일한 역할을 한다.
class Welcome extands React.Component {     // React.Component에서 상속받아서 Welcome이라는 class를 만들었고, React.Component에서 상속받았기 때문에 결과적으로 React Component가 된다. 
  render() {
    return <h1>안녕, {this.props.name}</h1>;
  }
}


<Component의 이름을 짓는 방법>
- Component의 이름은 항상 대문자로 시작해야 한다.
--> React는 소문자로 시작하는 Component를 DOM pack으로 인식하기 때문이다. 
    [ex] div, span 이런 식으로 사용할 경우 '내장 컴포넌트'를 뜻하게 되고, 앞과 같은 문자열('div', 'span') 형태로 React.createElement
         의 인자로 들어가게 된다.
         but Foo와 같이 대문자로 시작하면 React.createElement(Foo)의 형태로 컴파일되어 JS 내에서 사용자가 정의하였거나 import한
         컴포넌트를 가리킨다.

HTML div tag로 인식하는 [ex]
const element = <div />

Welcome이라는 리액트 Component로 인식 [ex]
const element = <Welcome name="인제" />
--> 여기에서 Welcome이 아닌 소문자로 시작하는 welcome을 사용한다면 리액트에서 welcome을 DOM pack이라고 인식하여 에러가 나거나
    의도하지 않은 결과가 발생할 것이다.


<Component 렌더링> 
컴포넌트를 렌더링 하기 위해 가장 먼저 컴포넌트를 element로 만드는 과정이 진행되어야 한다.   
바로 위 두 예시는 실제 React Element를 생성해내는 코드이다.

컴포넌트 렌더링 [ex]
function Welcome(props) {     --> Welcome 컴포넌트
  return <h1>안녕, {props.name}</h1>;
}

const element = <Welcome name="인제" />     --> react Element 생성 (Welcome 컴포넌트에 name="인제"를 넣어 호출한 결과)
ReactDOM.render(     --> 실제 화면에 렌더링 (React DOM을 통해 실제 DOM에 효과적으로 업데이트됨.)
  element,     --> 인자 확인! (React Element)
  document.getElementById('root')     --> 인자 확인! (document.getElementById('root'))
)