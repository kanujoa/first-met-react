<Component 합성>
- 여러 개의 컴포넌트를 합쳐서 하나의 컴포넌트로 만드는 것
  --> 리액트에서는 컴포넌트 안에 또 다른 컴포넌트를 생성할 수 있으므로 복잡한 화면을 여러 개의 component로 나눠서 구현이 가능하다.

Component 합성 [ex]
function Welcome(props) {     --> Welcome 컴포넌트
  return <h1>Hello, {props.name}</h1>
}

function App(props) {     --> Welcome 컴포넌트(하위 컴포넌트) 3개를 합성하여 만든 App 컴포넌트(상위 컴포넌트)
  return (
    <div>     --> 주목! props 값을 다르게 하여 Welcome 컴포넌트를 여러 번 사용하고 있다.
      <Welcome name="Mike" />
      <Welcome name="Steve" />
      <Welcome name="Jane" />
    </div>
  )
}

React.DOM.render(
  <App />,
  document.getElementById('root')
);


<Component 추출>
- 큰 컴포넌트에서 일부를 추출하여 새로운 컴포넌트를 만드는 과정을 말한다.
- Component 추출을 이용하면 컴포넌트의 재사용성이 올라간다. 컴포넌트의 크기가 작아질수록 해당 컴포넌트의 기능과 목적도 단순해지고,
  props도 단순해지기 때문에 다른 곳에서 사용할 수 있을 확률이 높아지기 때문이다. 이에 따라 개발 속도도 빨라진다.

Component 추출 [ex] Comment 컴포넌트에서 컴포넌트 추출해보기
* Comment 컴포넌트
function Comment(props) {
  reuturn (
    <div className="commment">
      <div className="user-info">     --> 추출 2
        <img className="avatar"     --> 추출 1
          src={props.author.avatarUrl}
          alt={props.author.name}
        />
        <div className="user-info-name">     
          {props.author.name}
        </div>
      </div>

      <div className="comment-text">     --> 추출 3
        {props.text}
      </div>

      <div className="comment-date">     --> 추출 4
        {formatDate(props.date)}
      </div>
    </div>
  )
}

Comment 컴포넌트의 props는 아래와 같은 형태일 것이다.
props = {
  author: {
    name: "소플",
    avatarUrl: "https://..."
  },
  text: "댓글입니다.",
  date: Date.now(),
}

1. Avatar 추출하기
img tag를 사용하여 사용자의 프로필을 보여주고 있는 부분을 추출하여 따로 Avatar 컴포넌트로 만들어 보겠다.
추출된 Avatar 컴포넌트는 다음과 같은 모습이다.
function Avatar(props) {
  return (
    <img className="avatar"
      src={props.user.avatarUrl}     --> 재사용성을 고려하여 author 대신 user를 사용함.
      alt={props.user.name}
    />
  );
}
이제 이렇게 추출된 Avatar 컴포넌트를 실제 HTML문서에 적용하면 된다.
기존 img 태크 부분을 삭제하고 <Avatar user={props.author} /> 를 적용하면 된다. --> 가독성이 높아짐!

2. UserInfo 추출하기
사용자의 정보를 담고 있는 부분을 추출해 보자. 추출된 UserInfo 컴포넌트는 다음과 같은 모습이다.
function UserInfo(props) {
  return (
    <div className="user-info">
      <Avatar user={props.user} />
      <div className="user-info-name">
        {props.user.name}
      </div>
    </div>
  );
}
실제 HTML 문서에 반영하면 기존 <div className="user-info"> 부분과 그 자식들을 모두 <UserInfo user={props.author} /> 한 줄로
치환할 수 있다.

* 현재까지 추출 결과
function Comment(props) {
  return (
    <div className="comment">
      <UserInfo user={props.author} />
      <div className="comment-text>
        {props.text}
      </div>
      ...... 이하 동일
  )
}

- 컴포넌트를 추출할 때에는 기능 단위로 구분하는 것이 좋고, 재사용성을 고려해 추출하는 것이 좋다.
- 재사용이 가능한 Component를 많이 가지고 있을수록 개발 속도가 빨라지게 된다.