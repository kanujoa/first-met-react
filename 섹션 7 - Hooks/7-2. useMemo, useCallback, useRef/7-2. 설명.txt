<Hook 더 알아보기>
1. useMemo() 
- Memoized value를 return하는 Hook
* Memoization : 최적화를 위해 사용하는 개념
                비용이 높은(연산량이 많은) 함수의 호출 결과를 저장해 두었다가, 같은 입력값으로 함수를 호출하면 새로 함수를 호출
                하지 않고 이전의 함수 호출 결과를 바로 반환하는 것
                결과적으로 함수 호출의 결과를 받기까지의 시간이 짧아질 뿐더러 불필요한 중복연산도 하지 않기 때문에 컴퓨터의 자원
                을 적게 사용하게 된다.

- 사용법
const memoizedValue = useMemo (
  () => {     // create 함수!
    // 연산량이 높은 작업을 수행하여 결과를 반환
    return computeExpensiveValue(의존성 변수1, 의존성 변수2);
  },
  [의존성 변수1, 의존성 변수2]
);
--> 의존성 변수에 들어있는 변수가 변했을 경우에만 새로 create함수를 호출하여 결과값을 반환하고, 그렇지 않을 경우 기존 함수의 결과
    값을 그대로 반환한다.
--> useMemo 훅을 사용하면 컴포넌트가 다시 렌더링될 때마다 연산량이 높은 작업을 반복하는 것을 피할 수 있다. 결과적으로 빠른 렌더링
    속도를 얻을 수 있다.
--> useMemo 안에는 렌더링이 일어나는 동안에 실행될 함수를 넣어야 한다. 따라서 렌더링이 일어나는 동안 실행되면 안되는 함수는 
    useMemo 안에 넣으면 안된다. 
    [ex] 서버에서 데이터를 가져오기, 수동으로 DOM을 변경하기 (side effect)  --> 모두 useMemo 훅이 아닌 useEffect 훅을 사용해야 한다.

- 의존성 배열을 넣지 않을 경우, 매 렌더링마다 함수가 실행된다.
const memoizedValue = useMemo(
  () => computdExpensiveValue(a, b)
);
--> 따라서 useMemo에서 의존성 배열을 넣지 않는 것은 아무런 의미가 없다.

- 의존성 배열이 빈 배열일 경우, 컴포넌트 마운트 시에만 호출된다.
const memoizedValue = useMemo(
  () => {
    return computeExpensiveValue(a, b);
  },
  []
);
--> 결국 mount 이후에는 값이 변경되지 않는 것이다. 따라서 mount 시점에서만 값을 변경할 필요가 있는 경우 위와 같이 사용하면 된다.


2. useCallback()
- useMemo() Hook과 유사하지만 값이 아닌 함수를 반환한다.
  --> 컴포넌트의가 렌더링 될 때마다 매번 함수를 새로 정의하는 것이 아니라 의존성 배열의 값이 바뀌는 경우에만 함수를 새로 정의해서
      return 해주는 것이다.

- 사용법
const memoizedCallback = useCallback(
  () => {     // useCallback 함수에 파라미터로 들어가는 함수를 callback이라고 함.
    doSomething(의존성 변수1, 의존성 변수2);
  },
  [의존성 변수 1, 의존성 변수 2]     // 의존성 변수 중 하나라도 변경되면 memoization된 callback 함수를 반환한다.
);

- 동일한 역할을 하는 두 줄의 코드
useCallback(함수, 의존성 배열);
useMemo(() => 함수, 의존성 배열);

useCallback 함수를 사용하지 않은 경우 [ex]
import { useState } from "react";

function ParentComponent(props) {     
  const [count, setCount] = useState(0);

  // 재렌더링 될 때마다 매번 함수가 새로 정의됨.
  const handleClick = (event) => {
    // 클릭 이벤트 처리
  };

  return (
    <div>
      <button
        onClick={() => {
          setCount(count + 1);
        }}
      >
        {count}
      </button>

      <ChildComponent handleClick={handleClick} />  // 컴포넌트 내에서 정의한 함수(handleClick)를 자식 컴포넌트의 props로 넘겨 사용하는 경우이다.
    </div>
  );
}

useCallback 함수를 사용한 경우 [ex]
import { useState, useCallback } from "react"

function ParentComponent(props) {
  const [count, setCount] = useState(0);

  // 컴포넌트가 mount 될 때만 함수가 정의됨 (의존성 배열이 비어 있음.)
  const handleClick = useCallback((event) => {
    // 클릭 이벤트 처리
  }, []);

  return (
    <div>
      <button
        onClick={() => {
          setCount(count + 1);
        }}
      >
        {count}
      </button>

      <ChildComponent handleClick={handleClick} />
    </div>
  );
}
--> 위와 같은 경우 컴포넌트가 처음 mount되는 경우에만 함수가 정의되고, 이후에는 다시 정의되지 않아 컴포넌트의 불필요한 재렌더링이
    일어나지 않게 된다.


3. useRef()
- Reference를 사용하기 위한 Hook으로 Reference 객체를 반환한다.
* Reference : 특정 컴포넌트에 접근할 수 있는 객체

- refObject.current : reference 객체의 current 속성은 현재 참조하고 있는 Element라고 보면 된다.

- 사용법
const refContainer = useRef(초깃값);
--> 해당 초깃값으로 초기화된 reference 값을 반환한다. (초깃값은 null도 가능)

useRef() 사용 [ex]
function TextInputWithFocusButton(props) {
  const inputElem = useRef(null);     // useRef Hook을 사용하여 버튼 클릭 시 input에 focus를 하게 하는 코드
  
  const onButtonClick = () => {
    // `current`는 마운트된 input element를 가리킴.
    inputElem.current.focus();     // inputElem.current를 통해 실제 element에 접근하여 focus 함수를 호출하고 있다.
  };

  return (
    <>
      <input ref={inputElem} type="text" />     // 주목!
      <button onClick={onButtonClick}>
        Focus the input
      </button>
    </>
  );
}

- useRef() Hook은 내부의 데이터가 변경되었을 때 별도로 알리지 않으므로 current 속성을 변경한다고 해서 재렌더링이 일어나지는 않는다.
  따라서 Ref에 DOM 노드가 연결되거나 분리되었을 경우에 어떤 코드를 실행하고 싶다면 Callback ref를 사용하여 변경 시 알림을 받을 수 있게 할 수 있다.
  그렇게 하면 ref가 다른 노드에 연결될 때마다 callback을 호출하게 된다.

Callback ref 사용 [ex]
function MeasureExample(props) {
  const [height, setHeight] = useState(0);

  const measuredRef = useCallback(node => {     // 주목!
    if (node !== null) {
      setHeight(node.getBoundingClientRect().height);     // 높이값 업데이트
    }
  }, []);     // 의존성 배열이 빈 배열 --> <h1> tag가 mount와 unmount 될 때만 callback 함수가 호출되며 재렌더링이 일어날 때는 호출되지 않는다.

  return (
    <>
      <h1 ref={measuredRef}>안녕, 리액트</h1>
      <h2>위 헤더의 높이는 {Math.round(height)}px 입니다.</h2>
    </>
  );
}