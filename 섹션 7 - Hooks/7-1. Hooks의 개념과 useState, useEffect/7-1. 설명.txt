최근 리액트 개발 시 대부분 Hook을 사용하여 개발하기 때문에 잘 이해하고 넘어가는 것이 중요!

<Hooks>
1. Class Component의 특징
- 생성자(constructor)에서 state를 정의
- setState() 함수를 통해 state 업데이트
- Lifecycle methods 제공
따라서 state에 관련된 기능 뿐만 아니라 Component의 생명주기 함수들까지 모두 명확하게 정의되어 있어 잘 가져다 쓰기만 하면 된다.

2. 기존 Function Component의 특징
- state 사용 불가
- Lifecycle에 따른 기능 구현 불가
여기에 'Hooks' 라는 개념을 도입하여 함수 컴포넌트에서도 class 컴포넌트의 기능을 동일하게 사용할 수 있다.

3. Hook --> 갈고리
리액트의 state와 생명주기 기능에 갈고리를 걸어 원하는 시점에 정해진 함수를 실행되도록 만든다.
이때, 실행되는 함수를 Hook이라고 한다. Hook의 이름은 모두 use로 시작한다.
개발자가 직접 custom Hook을 만드는 것도 가능한데, 이름을 지을 때는 use로 시작해야 한다.


<Hook 알아보기>
1. useState()
--> state를 사용하기 위한 Hook, 가장 많이 사용됨.
--> 함수 컴포넌트에서는 기본적으로 state를 제공하지 않아 클래스 컴포넌트처럼 state를 사용하고 싶다면 useState()를 사용해야 한다.
--> 사용법 : const[변수명, set함수명] = useState(초기값);
    return 값으로 배열이 나오는데, 첫번째 값은 state로 선언된 변수, 두번째 값은 해당 state의 set 함수이다.

useState를 사용하지 않은 경우 [ex]
import React, { useState } from "react";

function Counter(props) {
  var count = 0;     // 주목!

  return (
    <div>
      <p>총 {count}번 클릭했습니다.</p>
      <button onClick={() => count++}>     // 주목!
        클릭
      </button>
    </div>
  );
}

위처럼 count를 함수의 변수로 사용하게 되면 버튼 클릭 시 count 값 자체를 증가시킬수는 있지만 재렌더링이 일어나지 않아 새로운 count
값이 화면에 표시되지 않게 된다. 따라서 state를 사용해 count값이 바뀔 때마다 재렌더링 되도록 해야 하는데 함수 컴포넌트에는 state
기능이 따로 없기 때문에 useState를 사용하여 state를 선언하고 업데이트해야 한다.

useState를 사용하여 코드 다시 짜기 [ex]
import React, { useState } from "react";     // 주목!

function Counter(props) {
  const [count, setCount] = useState(0);     // 변수명은 count, set함수명은 setCount, 초기값은 0으로 설정되어 있는 것을 볼 수 있다. (위의 예시와 어떻게 대응하는지 보기!)

  return (
    <div>
      <p>총 {count}번 클릭했습니다.</p>
      <button onClick={() => setCount(count + 1)}>     // 주목! setCount에 count+1의 값을 인자로 넣는 형식으로 바뀜.
        클릭
      </button>
    </div>
  );
}

버튼이 눌리면 setCount함수를 호출하여 count를 1 증가시킨다. 그리고 count의 값이 변경되면 컴포넌트가 재렌더링되면서 화면에 새로운
count값이 표시된다.
이 과정은 Class Component에서 setState() 함수를 호출해서 state가 업데이트되고, 이후 컴포넌트가 재렌더링되는 과정과 동일하다.
but Class 컴포넌트에서는 setState() 함수 하나로 모든 state 값 업데이트가 가능했지만 useState를 사용하는 방법에서는 변수 각각에
대해 set 함수가 따로 존재한다.


2. useEffect()
--> 리액트의 함수 컴포넌트에서 side effect를 실행할 수 있게 해주는 Hook
* side effect : 리액트에서는 '효과', '영향'의 의미에 가깝다.  
                [ex] 서버에서 데이터 받아오기, 수동으로 DOM을 변경하기
                이것이 effect라고 불리는 이유는 다른 컴포넌트에 영향을 미칠 수 있으며 렌더링 중에는 작업이 완료될 수 없기 때문
                즉, 렌더링이 끝난 이후에 실행되어야 하는 작업들이다.
--> 사용법 : useEffect(이펙트 함수, 의존성 배열);     
    의존성 배열 안의 변수 중 값이 하나라도 바뀌는 경우 이펙트 함수가 실행된다.
    기본적으로 이펙트 함수는 처음 컴포넌트가 렌더링된 이후와 업데이트로 인한 재렌더링 이후에 실행된다.
--> useEffect(이펙트 함수, []);    
    : 만약 이펙트 함수가 mount, unmount시 단 한번씩만 실행되게 하려면 위와 같이 의존성 배열을 빈 배열로 작성하면 됨.
      해당 이펙트가 props나 state에 있는 어떤 값에도 의존하지 않는 것이 되므로 여러번 실행되지 않는다.
--> useEffect(이펙트 함수);
    : 의존성 배열을 생략하면 컴포넌트가 업데이트될 때마다 호출되게 된다.

useEffect() 사용 [ex 1]
import React, { useState, useEffect } from "react";     // 주목!

function Counter(props) {
  const [count, setCount] = useState(0);

  // componentDidMount, componentDidUpdate와 비슷하게 작동
  useEffect(() => {     // 주목!
    // 브라우저 API를 사용해서 document의 title을 업데이트한다.
    document.title = `You clicked ${count} times`
  });

  return (
    <div>
      <p>총 {count}번 클릭했습니다.</p>
      <button onClick={() => setCount(count + 1)}>
        클릭
      </button>
    </div>
  );
}

의존성 배열 없이 useEffect함수를 사용하였으므로 리액트는 DOM이 변경된 이후에 해당 이펙트 함수를 실행하라는 의미로 받아들인다.
컴포넌트가 처음 렌더링 될 때를 포함하여 매번 렌더링될 때마다 이펙트가 실행된다고 보면 된다.
결과적으로 위 코드는 componentDidMount, componentDidUpdate와 동일한 역할을 하게 된다.
또한 이펙트는 함수 컴포넌트 안에서 선언되기 때문에 해당 컴포넌트의 props와 state에 접근할 수 있다. 위 코드에서는 count라는 state
에 접근하여 해당 값이 포함된 문자열을 생성해 사용하는 것을 볼 수 있다.

useEffect() [ex]
import React, { useState, useEffect } from "react";     // 주목!

function UserStatus(props) {
  const [isOnline, setIsOnline] = useState(null);

  function handleStatusChange(status) {
    setIsOnline(status.isOnline);
  }

  // serverAPI를 사용하여 사용자의 상태를 구독하고 있고, 구독을 해지하는 API를 호출하도록 되어 있다.
  useEffect(() => {
    ServerAPI subscribeUserStatus(props.user.id, handleStatusChange);
    return () => {
      ServerAPI.unscribeUserStatus(props.user.id, handleStatusChange);     // 주목! 컴포넌트가 unmount될 때 호출됨.
    };
  });

  if (isOnline === null) {
    return '대기 중...';
  }
  return isOnline ? '온라인' : '오프라인'
}