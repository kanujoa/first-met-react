<리액트의 장점>
1. 빠른 업데이트와 랜더링 속도 : 웹사이트를 탐색할 때 화면에 나타나는 내용이 빠르게 바뀐다.
  --> React에서는 빠른 업데이트를 위해 Virtual DOM 이라는 것을 사용한다.
      * DOM(Document Object Model) : 웹페이지를 정의하는 하나의 객체 (하나의 웹사이트 정보를 모두 담고 있는 큰 그릇이라고 생각!)
      * console 창에 document라고 치면 그 웹페이지의 DOM이 결과로 나온다. (그 웹페이지의 모든 HTML이 나옴.)
      
      Virtual DOM은 '가상'의 DOM으로 가짜 DOM과 실제 DOM 사이에서 매개체 역할을 한다고 볼 수 있음.
      화면을 업데이트 == 웹사이트 정보를 담고 있는 DOM을 수정하는 것
      기존의 방식대로라면 실제 DOM을 직접 수정해야 하므로 성능에도 영향을 미치고, 수정할 부분을 DOM 데이터에서 모두 찾아야 하기 때문에
      비용 또한 많이 든다.
      but React는 DOM을 직접 수정하는 것이 아닌 업데이트를 해야 할 부분만 찾아서(검색, Compute Diff) 변경하여 빠르게 사용자에게게
      보여준다.(Re-render)

2. 컴포넌트 기반(Component-Based) : 모든 페이지는 컴포넌트로 구성되어 있고, 하나의 컴포넌트는 작은 컴포넌트들로 구성되어 있다. 
- 재사용성(Reusability) : 다시 사용이 가능한 성질
  --> 의존성 문제 발생 가능
      (ex 1) CALENDAR 모듈은 DATE 모듈에 의존성을 가지고 있어 DATE 모듈이 없을 시 다른 프로그램에서 재사용이 불가하다.
      (ex 2) STRING 모듈은 독립적으로 재사용이 가능하다.
      (여러 모듈간의 의존성이 낮을수록 효율적이게 됨.)
  --> 개발 기간이 단축되고, 유지보수가 용이함. (수정할 부분만 빠르게 찾아 고치기 가능, 버그도 더 빠르게 잡아낼 수 있음.)

3. 큰 스폰서를 가지고 있어 발전이 잘된다.

4. 활발한 지식공유, 커뮤니티

5. React Native를 사용하면 안드로이드, ios 앱을 만들 수 있다.


<리액트의 단점>
1. 방대한 학습량 (새로운 개념들 많이 등장)
--> 업데이트가 계속 이루어지면서 바뀌거나 추가된 부분을 계속 공부해야 함.

2. 높은 상태관리 복잡도
--> 웹사이트의 규모가 커질수록 컴포넌트의 개수도 많아져 상태관리가 복잡해진다.
--> redux 같은 외부 상태 관리 라이브러리를 이용해 해결하기도 한다.